{
  "name": "tester",
  "version": "1.3.5",
  "description": "Unit testing made simple and fun: flat colors and emoji in your tests.",
  "main": "lib/index.js",
  "directories": {
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "node test"
  },
  "author": {
    "name": "Ionică Bizău",
    "email": "bizauionica@gmail.com",
    "url": "http://ionicabizau.net"
  },
  "license": "MIT",
  "dependencies": {
    "emoji-logger": "^1.0.0",
    "expect": "^1.13.0",
    "queoid": "^1.0.0",
    "try-async": "^1.0.0"
  },
  "blah": {
    "description": [
      {
        "h2": ":star: Features"
      },
      {
        "ul": [
          "It does *not* create any globals.",
          "Writing messages in custom streams (by default in `process.stdout`).",
          "Easy interface for handling sync and async stuff.",
          "Emoji & Flat colors :art:",
          "Just run the test file using `node`"
        ]
      },
      {
        "h2": "Tip :bulb:"
      },
      "Use the [`tester-init`](https://github.com/IonicaBizau/tester-init) to init the test file."
    ],
    "installation": [
      {
        "p": "After installing the package, you just need to set up a test file where you `require` the `tester` package. Your `package.json` will look like this:"
      },
      {
        "code": {
          "language": "js",
          "content": [
            "{",
            "  \"name\": \"tester\",",
            "  ...",
            "  \"scripts\": {",
            "    \"test\": \"node test/your-test-file.js\"",
            "  },",
            "  ...",
            "  \"devDependencies\": {",
            "    \"tester\": \"^1.0.0\"",
            "  }",
            "}"
          ]
        }
      },
      {
        "p": "`test/your-test-file.js` will contain your tests, like documented below."
      }
    ],
    "ex_img": "http://i.imgur.com/WzLYt7t.png",
    "is_dev": true,
    "show_usage": false
  },
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "git+https://github.com/IonicaBizau/tester.git"
  },
  "bugs": {
    "url": "https://github.com/IonicaBizau/tester/issues"
  },
  "homepage": "https://github.com/IonicaBizau/tester#readme",
  "keywords": [
    "test",
    "unit",
    "testing",
    "emoji",
    "flat",
    "colors"
  ],
  "files": [
    "bin/",
    "app/",
    "lib/",
    "dist/",
    "src/",
    "resources/",
    "menu/",
    "scripts/",
    "cli.js",
    "index.js"
  ],
  "readme": "\n# tester\n\n [![PayPal](https://img.shields.io/badge/%24-paypal-f39c12.svg)][paypal-donations] [![AMA](https://img.shields.io/badge/ask%20me-anything-1abc9c.svg)](https://github.com/IonicaBizau/ama) [![Version](https://img.shields.io/npm/v/tester.svg)](https://www.npmjs.com/package/tester) [![Downloads](https://img.shields.io/npm/dt/tester.svg)](https://www.npmjs.com/package/tester) [![Get help on Codementor](https://cdn.codementor.io/badges/get_help_github.svg)](https://www.codementor.io/johnnyb?utm_source=github&utm_medium=button&utm_term=johnnyb&utm_campaign=github)\n\n> Unit testing made simple and fun: flat colors and emoji in your tests.\n\n## :star: Features\n\n - It does *not* create any globals.\n - Writing messages in custom streams (by default in `process.stdout`).\n - Easy interface for handling sync and async stuff.\n - Emoji & Flat colors :art:\n - Just run the test file using `node`\n\n## Tip :bulb:\nUse the [`tester-init`](https://github.com/IonicaBizau/tester-init) to init the test file.\n\n[![tester](http://i.imgur.com/WzLYt7t.png)](#)\n\n## :cloud: Installation\n\n```sh\n$ npm i --save-dev tester\n```\n\n\n\nAfter installing the package, you just need to set up a test file where you `require` the `tester` package. Your `package.json` will look like this:\n\n```js\n{\n  \"name\": \"tester\",\n  ...\n  \"scripts\": {\n    \"test\": \"node test/your-test-file.js\"\n  },\n  ...\n  \"devDependencies\": {\n    \"tester\": \"^1.0.0\"\n  }\n}\n```\n\n`test/your-test-file.js` will contain your tests, like documented below.\n\n\n## :clipboard: Example\n\n\n\n```js\nconst tester = require(\"tester\");\n\n// Use describe to group the tests\ntester.describe(\"Running some example tests\", example => {\n\n    // Without a callback (the code will be executed syncronously)\n    example.should(\"be able to make simple checks using expect\", () => {\n        example.expect(true).toBe(true);\n    });\n\n    // Async function which will fail\n    example.should(\"support async functions\", (cb) => {\n        setTimeout(function() {\n            example.expect(true).toBe(false);\n            cb();\n        }, 100);\n    });\n\n    // Wait a second and pass\n    example.it(\"wait a second\", (cb) => {\n        setTimeout(function() {\n            example.expect(true).toBe(true);\n            cb();\n        }, 1000);\n    });\n});\n\ntester.describe(\"Running another set of tests\", another => {\n    another.it(\"some test\", () => {\n        another.expect(true).toBe(true);\n    });\n});\n```\n\n## :memo: Documentation\n\n\n### `Describe(message, fn)`\nCreates a new `Describe` instance.\n\nTo change the default configuration, you can override the `tester` fields:\n\n```js\nlet tester = require(\"tester\");\n```\n\n#### Colors\n\n`tester` uses [`color-it`](https://github.com/IonicaBizau/node-color-it)\nto color the messages. You can use any available color name (defaults are listed):\n\n - `colors` (Object):\n   - `it` (Object)\n     - `success`: `\"green\"`\n     - `error`: `\"red\"`\n   - `describe`: `\"yellow\"`\n\nFor example, to have [**blue**](#) describe messages, you will do: `tester.colors.describe = \"blue\"`.\n\n#### Icons\n\n`tester` uses emoji provided by [`emojic`](https://github.com/IonicaBizau/emojic):\n\n  - `icons`\n    - `it`\n      - `success`: `\"zap\"`\n      - `error`: `\"x\"`\n    - `describe`: `\"arrowRight\"`\n\n#### Indent\n\n`tester` uses [`indento`](https://github.com/IonicaBizau/indento) to indent the strings:\n\n - `indent`\n   - `it`: `5`\n   - `describe`: `2`\n\n#### Loggers\n\nYou can override any of the following fields\n\n - `loggers`\n   - `stream`: The stream where the messages will be written (default: `process.stdout`).\n   - `it (err, itMessage, icon)`\n   - `describe (message)`\n\n#### Params\n- **String** `message`: The `Describe` message.\n- **Function** `fn`: The callback function.\n\n### `run(fn)`\nRuns the tests from this group.\n\n#### Params\n- **Function** `fn`: The callback function.\n\n### `expect()`\nThis is a wrapper around the `expect` package.\n\n#### Return\n- **Expect** The `Expect` result.\n\n### `it(what, fn)`\nAdds a new test in the describe queue.\n\n#### Params\n- **String** `what`: The test message.\n- **Function** `fn`: The callback function.\n\n### `should(what, fn)`\nAdds a new test in the describe queue prefixing the message with *should*.\n\n#### Params\n- **String** `what`: The test message.\n- **Function** `fn`: The callback function.\n\n### `describe(what, fn)`\nGroups more tests together.\n\n#### Params\n- **String** `what`: The describe message.\n- **Function** `fn`: The callback function.\n\n\n\n## :yum: How to contribute\nHave an idea? Found a bug? See [how to contribute][contributing].\n\n\n## :scroll: License\n\n[MIT][license] © [Ionică Bizău][website]\n\n[paypal-donations]: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=RVXDDLKKLQRJW\n[donate-now]: http://i.imgur.com/6cMbHOC.png\n\n[license]: http://showalicense.com/?fullname=Ionic%C4%83%20Biz%C4%83u%20%3Cbizauionica%40gmail.com%3E%20(http%3A%2F%2Fionicabizau.net)&year=2015#license-mit\n[website]: http://ionicabizau.net\n[contributing]: /CONTRIBUTING.md\n[docs]: /DOCUMENTATION.md\n",
  "readmeFilename": "README.md",
  "gitHead": "428ae99fdf2b773b51498e5bb5fb9e0e4aa22700",
  "_id": "tester@1.3.5",
  "_shasum": "4f75396be0ed729bc68c2919e5e5ae2aba42c01f",
  "_from": "tester@*"
}
